<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <meta charset="utf-8">
    <link rel="canonical" href="https://sharefreenode.github.io/news/article-47378.htm" />
    <title>Halo 开源项目学习（六）：事件监听机制_在线工具</title>
        <meta name="description" content="基本介绍 Halo 项目中，当用户或博主执行某些操作时，服务器会发布相应的事件，例如博主登录管理员后台时发布 "日志记录" 事件，用户浏览文章时发布 "访问文章" 事件。事件发布后，负责监听的 Bea" />
        <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <!-- Favicons -->
    <link rel="icon" href="/assets/website/img/sharefreenode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ShareFreeNode节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://sharefreenode.github.io/news/article-47378.htm" />
    <meta property="og:site_name" content="ShareFreeNode节点订阅站" />
    <meta property="og:title" content="Halo 开源项目学习（六）：事件监听机制_在线工具" />
    <meta property="og:image" content="https://sharefreenode.github.io/uploads/20240415/67da91ed39f9c4aeaa36019d3feb2f9a.webp" />
        <meta property="og:release_date" content="2025-01-28T09:32:02" />
    <meta property="og:updated_time" content="2025-01-28T09:32:02" />
        <meta property="og:description" content="基本介绍 Halo 项目中，当用户或博主执行某些操作时，服务器会发布相应的事件，例如博主登录管理员后台时发布 "日志记录" 事件，用户浏览文章时发布 "访问文章" 事件。事件发布后，负责监听的 Bea" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Halo 开源项目学习（六）：事件监听机制_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <link href="/assets/website/img/sharefreenode/apple-touch-icon.png" rel="apple-touch-icon">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,700,700i|Raleway:300,400,500,700,800|Montserrat:300,400,700" rel="stylesheet">
    <!-- Bootstrap CSS File -->
    <link href="/assets/website/js/frontend/sharefreenode/lib/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <!-- Libraries CSS Files -->
    <link href="/assets/website/js/frontend/sharefreenode/lib/font-awesome/css/font-awesome.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/sharefreenode/lib/animate/animate.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/sharefreenode/lib/ionicons/css/ionicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/sharefreenode/lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/sharefreenode/lib/magnific-popup/magnific-popup.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/sharefreenode/lib/ionicons/css/ionicons.min.css" rel="stylesheet">
    <!-- Main Stylesheet File -->
    <link href="/assets/website/css/sharefreenode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-300HPJ3F69"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-300HPJ3F69');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="body" data-page="detail">
    <!--==========================
    Header
  ============================-->
<header id="header">
    <div class="container">
        <div id="logo" class="pull-left">
                        <a href="/" class="scrollto">Share<span>FreeNode</span></a>
                        <!-- <a href="#body"><img src="/assets/addons/xcblog/img/sharefreenode/logo.png" alt="" title="" /></a>-->
        </div>
        <nav id="nav-menu-container">
            <ul class="nav-menu">
                                <li><a href="/">首页</a></li>
                                <li><a href="/free-nodes/">免费节点</a></li>
                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                <li><a href="/news/">新闻资讯</a></li>
                                <li>
                    <a href="#">关于</a>
                </li>
                <li>
                    <a href="#">联系</a>
                </li>
            </ul>
        </nav><!-- #nav-menu-container -->
    </div>
</header><!-- #header -->
    <!--==========================
    Page Banner Section
  ============================-->
    <section id="innerBanner">
        <div class="inner-content">
            <h2><span>Halo 开源项目学习（六）：事件监听机制_在线工具</span></h2>
            <p><a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span></p>
        </div>
    </section><!-- #Page Banner -->
    <main id="main">
        <!--==========================
      Clients Section
    ============================-->
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <section id="clients" class="wow fadeInUp">
                        <div class="container">
                            <div class="section-header">
                                                <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h2 id="基本介绍">基本介绍</h2> <p>Halo 项目中，当用户或博主执行某些操作时，服务器会发布相应的事件，例如博主登录管理员后台时发布 "日志记录" 事件，用户浏览文章时发布 "访问文章" 事件。事件发布后，负责监听的 Bean 会做出相应的处理，这种设计称为事件监听机制，其作用是可以实现业务逻辑之间的解耦，提高程序的扩展性和可维护性。</p> <h2 id="applicationevent-和-listener">ApplicationEvent 和 Listener</h2> <p>Halo 使用 ApplicationEvent 和 Listener 来实现事件的发布与监听，二者由 Spring 提供，其中 ApplicationEvent 是需要发布的事件，Listener 则是监听器。用户可在监听器中自定义事件的处理逻辑，当事件发生时，只需要将事件发布，监听器会根据用户定义的逻辑自动处理该事件。</p> <p><strong>定义事件</strong></p> <p>事件需要继承 ApplicationEvent 类，且需要重载构造方法，以 LogEvent 为例：</p> <pre><code class="language-java">public class LogEvent extends ApplicationEvent {      private final LogParam logParam;      /**      * Create a new ApplicationEvent.      *      * @param source the object on which the event initially occurred (never {@code null})      * @param logParam login param      */     public LogEvent(Object source, LogParam logParam) {         super(source);          // Validate the log param         ValidationUtils.validate(logParam);          // Set ip address         logParam.setIpAddress(ServletUtils.getRequestIp());          this.logParam = logParam;     }      public LogEvent(Object source, String logKey, LogType logType, String content) {         this(source, new LogParam(logKey, logType, content));     }      public LogParam getLogParam() {         return logParam;     } } </code></pre> <p>构造方法中的 source 指的是触发事件的 Bean，也称为事件源，通常用 this 关键字代替，其它参数可由用户任意指定。</p> <p><strong>发布事件</strong></p> <p>ApplicationContext 接口的 publishEvent 方法可用于发布事件，例如博客初始化完成后发布 LogEvent 事件（InstallConroller 中的 installBlog 方法）：</p> <pre><code class="language-java">public BaseResponse&lt;String&gt; installBlog(@RequestBody InstallParam installParam) {     // 省略部分代码      eventPublisher.publishEvent(         new LogEvent(this, user.getId().toString(), LogType.BLOG_INITIALIZED, "博客已成功初始化")     );      return BaseResponse.ok("安装完成！"); } </code></pre> <p><strong>监听器</strong></p> <p>监听器的创建方式有多种，例如实现 ApplicationListener 接口、SmartApplicationListener 接口，或者添加 @EventListener 注解。项目中使用注解来定义监听器，如 LogEventListener：</p> <pre><code class="language-java">@Component public class LogEventListener {      private final LogService logService;      public LogEventListener(LogService logService) {         this.logService = logService;     }      @EventListener     @Async     public void onApplicationEvent(LogEvent event) {         // Convert to log         Log logToCreate = event.getLogParam().convertTo();          // Create log         logService.create(logToCreate);     } } </code></pre> <p>用户可在 @EventListener 注解修饰的方法中定义事件的处理逻辑，方法接收的参数为监听的事件类型。@Async 注解的作用是实现异步监听，以上文中的 installBlog 方法为例，如果不添加该注解，那么程序需要等待 onApplicationEvent 方法执行结束后才能返回 "安装完成！"。加上 @Async 注解后，onApplicationEvent 方法会在新的线程中执行，installBlog 方法可以立即返回。若要使 @Async 注解生效，还需要在启动类或配置类上添加 @EnableAsync 注解。</p> <h2 id="事件处理">事件处理</h2> <p>接下来我们分析一下 Halo 项目中不同事件的处理过程：</p> <p><strong>日志记录事件</strong></p> <p>日志记录事件 LogEvent 由 LogEventListener 中的 onApplicationEvent 方法处理，该方法的处理逻辑非常简单，就是在 logs 表中插入一条系统日志，插入的记录用于在管理员界面展示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/cf0cd2b4a56aa2c0300d7a6c8b69ec0d.jpg" alt="Halo 开源项目学习（六）：事件监听机制_在线工具"></p> <p>需要注意的是，不同类型日志的 logKey、logType 以及 content 会有所区别，例如用户登录时，logKey 为用户的 userName，logType 为 LogType.LOGGED_IN，content 为用户的 nickName：</p> <pre><code class="language-java">eventPublisher.publishEvent(         new LogEvent(this, user.getUsername(), LogType.LOGGED_IN, user.getNickname())); </code></pre> <p>发布文章时，logKey 为文章的 id，logType 为 LogType.POST_PUBLISHED，content 为文章的 title：</p> <pre><code class="language-java">LogEvent logEvent = new LogEvent(this, createdPost.getId().toString(),     LogType.POST_PUBLISHED, createdPost.getTitle()); eventPublisher.publishEvent(logEvent); </code></pre> <p><strong>文章访问事件</strong></p> <p>文章访问事件 PostVisitEvent 由  AbstractVisitEventListener 中的 handleVisitEvent 方法处理，该方法的处理的逻辑是将当前文章的访问量加一：</p> <pre><code class="language-java">protected void handleVisitEvent(@NonNull AbstractVisitEvent event) throws InterruptedException {     Assert.notNull(event, "Visit event must not be null");     // 获取文章 id     // Get post id     Integer id = event.getId();      log.debug("Received a visit event, post id: [{}]", id);      // 如果当前 postId 具有对应的 BlockingQueue, 那么直接返回该 BlockingQueue, 否则为当前 postId 创建一个新的 BlockingQueue     // Get post visit queue     BlockingQueue&lt;Integer&gt; postVisitQueue =         visitQueueMap.computeIfAbsent(id, this::createEmptyQueue);     // 如果当前 postId 具有对应的 PostVisitTask, 不做任何处理, 否则为当前 postId 创建一个新的 PostVisitTask 任务     visitTaskMap.computeIfAbsent(id, this::createPostVisitTask);     // 将当前 postId 存入到对应的 BlockingQueue     // Put a visit for the post     postVisitQueue.put(id); } </code></pre> <p>上述方法首先获取当前被访问文章的 postId，然后查询 visitQueueMap 中是否存在 postId 对应的阻塞队列（实际类型为 LinkedBlockingQueue），如果存在那么直接返回该队列, 否则为当前 postId 创建一个新的阻塞队列并存入到 visitQueueMap。接着查询 visitTaskMap 中是否存在 postId 对应的 PostVisitTask 任务（任务的作用是将文章的访问量加一），如果没有，那么就为 postId 创建一个新的 PostVisitTask 任务，并将该任务交给线程池 ThreadPoolExecutor（Executors.newCachedThreadPool()）执行。之后将 postId 添加到对应的阻塞队列，这一步的目的是管理 PostVisitTask 任务的执行次数。</p> <p>visitQueueMap 和 visitTaskMap 都是 ConcurrentHashMap 类型的对象，使用 ConcurrentHashMap 是为了保证线程安全，因为监听器的事件处理方法被 @Async 注解修饰。默认情况下，@Async 注解修饰的方法会由 Spring 创建的线程池 ThreadPoolTaskExecutor 中的线程执行，因此当某一篇文章被多个用户同时浏览时，ThreadPoolTaskExecutor 中的多个线程可能会同时在 visitQueueMap 中创建阻塞队列，或在 visitTaskMap 中创建 PostVisitTask 任务。</p> <p>下面看一下 PostVisitTask 任务中 run 方法的处理逻辑：</p> <pre><code class="language-java">public void run() {     while (!Thread.currentThread().isInterrupted()) {         try {             BlockingQueue&lt;Integer&gt; postVisitQueue = visitQueueMap.get(id);             Integer postId = postVisitQueue.take();              log.debug("Took a new visit for post id: [{}]", postId);              // Increase the visit             basePostService.increaseVisit(postId);              log.debug("Increased visits for post id: [{}]", postId);         } catch (InterruptedException e) {             log.debug(                 "Post visit task: " + Thread.currentThread().getName() + " was interrupted",                 e);             // Ignore this exception         }     }      log.debug("Thread: [{}] has been interrupted", Thread.currentThread().getName()); }  </code></pre> <p>线程池 ThreadPoolExecutor 中的一个线程处理该任务：</p> <ol> <li> <p>从 visitQueueMap 获取 postId 对应的阻塞队列（这里的 id 其实就是 postId），并取出队首元素。</p> </li> <li> <p>将 postId 对应的文章的点赞量加一。</p> </li> <li> <p>只要线程不被中断，就一直重复步骤 1 和步骤 2，如果队列为空，那么线程进入阻塞。</p> </li> </ol> <p>综上，文章访问事件的处理流程总结如下：</p> <p>当 id 为 postId 的文章被访问时，系统会为其创建一个 LinkedBlockingQueue 类型的阻塞队列和一个负责将文章点赞量加一的 PostVisitTask 任务。然后 postId 入队，线程池 ThreadPoolExecutor 分配一个线程执行 PostVisitTask 任务，阻塞队列有多少个 postId 该任务就执行多少次。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/558ccd4b30162739ee01d56f96678b0f.jpg" alt="Halo 开源项目学习（六）：事件监听机制_在线工具"></p> <p><strong>结语</strong></p> <p>事件监听机制是一个非常重要的知识点，实际开发中，如果某些业务处理起来比较耗时，且与主要业务的关联性并不是很强，那么可以考虑做任务拆分，利用事件监听机制将串行执行异步化，改为并行执行（当然也可以使用消息队列）。Halo 中还有新增评论、主题更新等事件，这些事件的的处理思路与文章访问事件相似，所以本文就不再过多陈述了 ( ⊙‿⊙)。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-47377.htm">vue+el-upload实现文件上传</a></p>
                                        <p>下一个：<a href="/news/article-47865.htm">动物防疫疫苗管理工作方案范文大全（动物疫苗管理办法）</a></p>
                                    </div>
                                            </div>
                        </div>
                    </section><!-- #clients -->
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default" style="margin-top: 2rem;">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-24697.htm" title="深圳宠物领养中心在哪里啊 深圳宠物领养中心在哪里啊多少钱">深圳宠物领养中心在哪里啊 深圳宠物领养中心在哪里啊多少钱</a></li>
                        <li class="py-2"><a href="/news/article-21934.htm" title="领养的宠物要还回去吗（领养的宠物狗好吗）">领养的宠物要还回去吗（领养的宠物狗好吗）</a></li>
                        <li class="py-2"><a href="/news/article-44423.htm" title="猪疫苗时间表（猪疫苗大全）">猪疫苗时间表（猪疫苗大全）</a></li>
                        <li class="py-2"><a href="/news/article-19185.htm" title="Go 语言接口及使用接口实现链表插入">Go 语言接口及使用接口实现链表插入</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-13-free-subscribe-node.htm" title="11月13日22.8M/S|Shadowrocket/Clash/SSR/V2ray免费节点每天更新订阅链接，代理机场推荐">11月13日22.8M/S|Shadowrocket/Clash/SSR/V2ray免费节点每天更新订阅链接，代理机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-21020.htm" title="Spingboot Resttemplate连接池配置">Spingboot Resttemplate连接池配置</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-12-free-clash.htm" title="12月12日20.9M/S|Shadowrocket/V2ray/SSR/Clash免费节点每天更新订阅链接，代理机场推荐">12月12日20.9M/S|Shadowrocket/V2ray/SSR/Clash免费节点每天更新订阅链接，代理机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-20-node-share-links.htm" title="11月20日19.7M/S|Clash/SSR/V2ray/Shadowrocket免费节点每天更新订阅链接，代理机场推荐">11月20日19.7M/S|Clash/SSR/V2ray/Shadowrocket免费节点每天更新订阅链接，代理机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-14-clash-node.htm" title="12月14日20.6M/S|Shadowrocket/Clash/V2ray/SSR免费节点每天更新订阅链接，代理机场推荐">12月14日20.6M/S|Shadowrocket/Clash/V2ray/SSR免费节点每天更新订阅链接，代理机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-6-clash-node.htm" title="1月6日23M/S|V2ray/SSR/Clash/Shadowrocket免费节点每天更新订阅链接，代理机场推荐">1月6日23M/S|V2ray/SSR/Clash/Shadowrocket免费节点每天更新订阅链接，代理机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </main>
        <!--==========================
    Footer
  ============================-->
    <footer id="footer">
        <div class="container">
            <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    ShareFreeNode节点订阅站 版权所有
                    <br />
                    Powered by WordPress
            </div>
            <div class="credits">
            </div>
        </div>
    </footer><!-- #footer -->
    <a href="#" class="back-to-top"><i class="fa fa-chevron-up"></i></a>
    <!-- JavaScript  -->
    <script src="/assets/website/js/frontend/sharefreenode/lib/jquery/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/sharefreenode/lib/jquery/jquery-migrate.min.js"></script>
    <script src="/assets/website/js/frontend/sharefreenode/lib/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/sharefreenode/lib/easing/easing.min.js"></script>
    <script src="/assets/website/js/frontend/sharefreenode/lib/superfish/hoverIntent.js"></script>
    <script src="/assets/website/js/frontend/sharefreenode/lib/superfish/superfish.min.js"></script>
    <script src="/assets/website/js/frontend/sharefreenode/lib/wow/wow.min.js"></script>
    <script src="/assets/website/js/frontend/sharefreenode/lib/owlcarousel/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/sharefreenode/lib/magnific-popup/magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/sharefreenode/lib/sticky/sticky.js"></script>
    <script src="contact/jqBootstrapValidation.js"></script>
    <script src="contact/contact_me.js"></script>
    <script src="/assets/website/js/frontend/sharefreenode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>